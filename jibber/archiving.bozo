# |https://f001.backblazeb2.com/file/flower/anim.gif Pitahaya
~~~
[back home](index.html)
~~~
### Archiving uncompressed audio
Requires: [ffmpeg](https://ffmpeg.org/download.html), [node.js](https://nodejs.org/en/), [python](https://www.python.org/downloads/), [youtube-dlc](https://pypi.org/project/youtube-dlc)\
If running windows, get [cygwin](https://cygwin.com) to run the commands.
~~~
Suppose you want to release some uncompressed music on youtube. There really isn't a way to do this natively on Youtube -- the music in the audio channel will be compressed once you upload your video file. However with Pitahaya, you can use the video channel to store the uncompressed audio data. A listener can listen to your track on youtube, and if they like it and want a hard copy, they can download the video with youtube-dl as normal, but can now extract the uncompressed audio from the video channel with pitahaya, getting the music in its original quality.
~~~
#### Encoding
Note: The following command requires a lot of temporary hard drive space when it is encoding -- about 5 GB per minute of audio you are encoding. If you don't have enough space, [here](archivingalternate.html) is an alternate command that is slower but doesn't require that much disk space.
\\
This command will convert the 16 bit 44.1 kHz uncompressed audio file [audio.flac](https://github.com/fanfare/pitahaya/raw/master/au/audio.flac) into the video `output.mp4`. The video will contain an uncompressed copy of the .flac file in the video channel, and an audible copy of the audio in the audio channel.
> ffmpeg -i audio.flac \
> -f s16le -acodec pcm_s16le \
> -ar 44100 -ac 2 - \
> | pitahaya --tx pcm > rgbadata.raw \
> && ffmpeg -i audio.flac \
> -framerate 10 -f rawvideo \
> -pixel_format rgba -video_size 1920x1080 \
> -i rgbadata.raw -shortest -c:v libx264 \
> -crf 31 -preset veryfast \
> -r 10 -g 20 -f flv output.mp4 \
> && rm rgbadata.raw
After running the command, you will now have the file `output.mp4` which can be uploaded to youtube as a normal 1080p video.
~~~~
#### Decoding
The above encoded video can be found on youtube [here](https://youtu.be/pnNplEbofGo). You can download it with youtube-dlc by running 
> youtube-dlc -f 137 -o "outputcopy.mp4" https://youtu.be/pnNplEbofGo
which will save the video as `outputcopy.mp4`. Click [here](youtubedlerrors.html) if you get any errors.
\
You can now extract the uncompressed audio data from the video by running the following command:
> ffmpeg -nostats -loglevel 0 \
> -re -i outputcopy.mp4 \
> -vcodec rawvideo -pix_fmt rgba \
> -r 20 -f rawvideo - \
> | pitahaya --rx pcm \
> | ffmpeg -y -f s16le \
> -ar 44100 -ac 2 -i - \
> -f flac audiocopy.flac
After running the command, you will now have the file `audiocopy.flac` which will have the same audio data as the original file `audio.flac`.
~~~
#### Notes
- You can tell a Pitahaya-encoded video contains uncompressed audio data in the video channel (as opposed to mp3 data in the video channel) when the video's native size is 1080p.